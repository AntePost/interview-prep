Во-первых, хочу отметить, что я видел решение заданий, приведенное в методичке:
посмотрел его до того, как посмотрел урок. Но большую часть уже забыл.
Поэтому отвечу как знаю на текущий момент.

1. Укажите отличия между PHP 5.6 и 7 (как можно больше).
Какие из них вы считаете важными и удобными?
Ответ: что касается синтаксических различий, то сходу я много не вспомню:
вроде бы можно объявлять массивы чере [], что раньше было невозможно.
Но наверняка есть реально важные изменения. То, которое известно мне:
кардинальное повышение производительности, ядро языка было по сути переписано
заново, переделаны различные функции (например, функция сортировки).
В результате язык PHP стал актуальным инструментом для разработки серьезных
веб-проектов. Дополнительный скачок в производительности был сделан в версии 7.3
Можно также отметить, что разработка версии 7 вытеснила собой неудачный релиз -
версию 6. Насколько мне известно в разработке версии 7 участвовали специалисты
из ВКонтакте и Facebook, которые написаны на PHP и для которых качественная
версия языка была необходима.

2. Чем отличается __autoload от spl_autoload_register?
Примечание: ответ частично помню по методичке.
Ответ: __autoload - это более старая версия автозагрузчика, которая позволяет
одновременно иметь только один автозагрузчик, что может быть неудобно, так как
у подключаемых библиотек могут быть свои автозагрузчики. spl_autoload_register -
это новая версия автозагрузчика (появилась вроде бы в 7 версии), которая
создает очередь автозагрузчиков и добавляет туда текущий автозагрузчик.
Таким образом решается проблема конфликта автозагрузчиков.

3. Что такое ECMAScript? Чем он отличается от JavaScript?
Примечание: ответ частично помню по методичке.
Ответ: эти понятия часто используют взаимозаменяемо, но между ними есть
некоторое различие. ECMAScript - это стандарт языка JavaScript, который
поддерживается международной организацией по стандартизации - ECMA. Они в
результате процесса поиска консенсуса добавляют новые фичи в стандарт, которому
придерживаются реализации языка - например, JavaScript. Это реализация стандарта
ECMAScript, реализованная браузерами и платформой NodeJS. По факту она может
отличаться от ECMAScript, например имея некоторые фичи, которых пока нет в
стандарте. Так же следует отметить, что JavaScript в браузерной версии
реализовывает манипуляции с DOM, которых нет в ECMAScript (но насчет этого
факт могу ошибаться).

4. Какие типы БД вы знаете? Приведите примеры.
Ответ: основное разделение БД проходит по границе реляционные (SQL) и
нереляционные (NoSQL). Первые организуют данные по связанным таблицам и
используют язык запросов SQL (Structured Query Language), а вторые используют
другие принципы хранения данных. Что касается реляционных БД, то можно назвать
такие решения как Oracle, MySQL, MariaDB (форк MySQL), PostgreSQL, MSSQL.
Все они объединены принципом работы и языком SQL, но имеют разные особенности и
используют разные диалекты SQL. Что касается нереляционных БД, то тут
присутствуют разные типы хранения данных. Существует документоориентированная БД
MongoDB, использующая в качестве языка диалект JavaScript, а сами данные
храняться в виде "документов" - JSON (BSON) файлов. Другим решением является
база данных "ключ/значение" Redis, которая используется для кеширования данных и
хранится в оперативной памяти. Для полнотекстового поиска используется БД
ElasticSearch. Существует также колоночная база данных, но её название я забыл.
Можно также указать, что любую БД можно оценить по 3 показателям. К сожалению я
их точно не могу вспомнить. Кажется это consistency, availability, scalability.
Каждая из БД может реализовать 2 этих принципа, но никогда - 3.

5. Для чего нужны составные индексы в БД?
Ответ: Затрудняюсь ответить на этот вопрос развернуто. Могу предположить, что
примером составного индекса может служить составной первичный ключ, который
можно использовать вместо id, в случаях когда строку в таблице можно точно
идентифицировать по двум полям (которые часто являются внешними ключами).
Альтернативно можно предположить, что составной индекс может использоваться в
случаях, когда какой-то типичный запрос к БД связан с поиском по этим 2 полям.

6. Практическая задача.
Спроектируйте систему новостной ленты по указанным требованиям
Примечание: ответ частично помню по методичке.
Ответ: сначала определимся со стеком: в качестве сервера можно использовать
Apache, nginx или их связку, где Apache выступает в качестве основного сервера,
а nginx в качестве прокси-балансировщика. Находится серверное ПО на системе под
управлением Linux (например Ubuntu или CentOS). Для хранение данных можно
использовать одно из SQL решений (см. ответ на 4 вопрос). Дополнительно для
кеширования можно использовать Redis. Бэкенд архитектуру можно писать на многих
языках програмированния от Java (Spring) до Python (Django). Я приведу примеры
на JavaScript и PHP, как мне наиболее известных. Бэкенд на JavaScript пишется на
платформе NodeJS с использованием фреймворков (например, ExpressJS и дополнения
к нему такие как PassportJS). На PHP ситуация аналогичная, но существуют 3
основных фреймворка: Symphony, использующаяся для серьезных веб-проектов,
Laravel и Yii2, использующиеся для rapid-application development (причем Yii2 -
устаревшее решение). В качестве фронта также логично использовать один из JS
фреймворков: Angular, React, Vue или Svelte. Последний является новичком и пока
не "оброс" необходимой инфраструктурой. Из всего вышеперечисленного можно
собрать следующую комбинацию: nginx, Ubuntu, MySQL, Laravel, Vue (теоретически
можно обойтись и без Vue с учетом описанного функционала, только с помощью
шаблонизатора Blade).

Теперь поговорим о структуре БД: в минимальной версии (MVP) можно обойтись 3
таблицами: news_items, comments, users. В качестве примерных полей можно сделать
следующие:
CREATE TABLE news_items (
    id SERIAL,
    title VARCHAR(128),
    text TEXT,
    createdAt TIMESTAMP, // Индекс на эту колонку
    updatedAt TIMESTAMP
);
CREATE TABLE users (
    id SERIAL,
    username VARCHAR(128),
    password_hash VARCHAR(256),
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP
);
CREATE TABLE comments (
    id SERIAL,
    text TEXT,
    author_id BIGINT UNSIGNED NOT NULL, // FK на users.id
    news_item_id BIGINT UNSIGNED NOT NULL, // FK на news_items.id
    createdAt TIMESTAMP, // Индекс на эту колонку
    updatedAt TIMESTAMP
);

Запросы к БД:
SELECT * FROM news_items SORT BY createdAt DECS OFFSET X LIMIT 10;
// X - офсет номера страницы - 0 для 1 страницы, 10 - для 2 и т.п.
SELECT * FROM comments WHERE news_item_id = Y SORT BY createdAt ACS OFFSET X
    LIMIT 10;
// Y - id новости, X - тоже самое, что и выше, но увеличивается на 25, а не 10.

Бэкенд реализуется через парадигму (паттерн) MVC, у нас есть 3 модели,
соответствующие таблицам, контроллеры для ленты новостей и для отдельной новости
(также контроллер для регистрации, логина и админки). Вышеописанным контроллерам
соответствуют представления. Все они достаточно примитивны, единственное при
помощи middleware Laravel на скрывается добавление нового комментариях для
неавторизированных пользователей и кнопки логина и регистрации для
авторизированных. Vue для MVP можно и не использовать.

Примечание: "Новостей и комментариев может быть очень много." - честно говоря не
знаю, что ответить тут, курс по Highload проекту мне только предстоит.

7. * Усложнение задачи 6:
a. Напишите запрос, который будет отвечать за пагинацию новостей или
комментариев.
Ответ: уже сделал выше.

b. Где лучше сортировать выводимые данные – на уровне БД или логики? Почему?
Ответ: лучше делать это на уровне БД, которая специально предназначена для
хранения данных, там можно использовать индексы для ускорения поиска, а если
сортировать на уровне логики, то придется выкачивать все новости каждый раз из
БД, что нерационально.

c. Сверстайте прототип ленты новостей (без поддержки логики, с AJAX-заглушками).
Ответ: к сожалению не хватает времени, чтобы сделать эту задачу. Также не совсем
понимаю, Вы ведь сами на уроке говорили, что не надо делать тестовые задания,
которые отнимают больше 2 часов. Если же делать задачи 6-7, хотя бы в виде MPV,
то одно разворачивание проекта может легко отнять больше 2 часов.

8. * Надо обеспечить хранение большого списка файлов в системе CentOS.
Как организовать структуру директорий?
Отыет: даже, когда читал в методичке ответ, мало что понял. К сожалению не могу
ответить на этот вопрос.
